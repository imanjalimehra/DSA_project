# -*- coding: utf-8 -*-
"""DSA PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U0MhpD51A0oBCyAg9nbBrbmzaIObNtGF
"""

import os
import sys
from collections import defaultdict

# -------------------- Trie Node Definition -------------------- #
class TrieNode:
    def __init__(self):
        self.children = defaultdict(TrieNode)
        self.is_end = False

# -------------------- Trie Class -------------------- #
class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str):
        node = self.root
        for char in word.lower():
            node = node.children[char]
        node.is_end = True

    def search(self, word: str) -> bool:
        node = self.root
        for char in word.lower():
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end

    def suggestions(self, prefix: str) -> list:
        results = []

        def dfs(node: TrieNode, path: str):
            if node.is_end:
                results.append(path)
            for char, child in node.children.items():
                dfs(child, path + char)

        node = self.root
        for char in prefix.lower():
            if char not in node.children:
                return []
            node = node.children[char]

        dfs(node, prefix.lower())
        return results[:10]

# -------------------- Levenshtein Distance -------------------- #
def edit_distance(word1: str, word2: str) -> int:
    n, m = len(word1), len(word2)
    dp = [[0]*(m+1) for _ in range(n+1)]

    for i in range(n+1):
        dp[i][0] = i
    for j in range(m+1):
        dp[0][j] = j

    for i in range(1, n+1):
        for j in range(1, m+1):
            if word1[i-1] == word2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(
                    dp[i-1][j],     # delete
                    dp[i][j-1],     # insert
                    dp[i-1][j-1]    # replace
                )
    return dp[n][m]

def spell_check(input_word: str, dictionary: list) -> list:
    distances = [(word, edit_distance(input_word.lower(), word)) for word in dictionary]
    distances.sort(key=lambda x: x[1])
    return [word for word, _ in distances[:5]]

# -------------------- Dictionary Loader -------------------- #
def load_words(file_path: str, trie: Trie) -> list:
    words = []
    try:
        with open(file_path, 'r') as f:
            for line in f:
                word = line.strip()
                if word:
                    words.append(word)
                    trie.insert(word)
    except FileNotFoundError:
        print(f"❌ Oops! The dictionary file '{file_path}' was not found. Please check the path.")
        sys.exit(1)
    return words

# -------------------- UI Functions -------------------- #
def print_header():
    print("\n📘 Welcome to the Ultimate Auto-Complete & Spell Checker 📘")
    print("===================================")
    print("Let's make your typing experience better!\n")

def print_menu():
    print("""
✨ Choose an option:
1. Search for a word
2. Get auto-complete suggestions
3. Spell check
4. Exit
""")

def print_found_message(found):
    if found:
        print("🎉 Hooray! The word is in the dictionary! ✅")
    else:
        print("😞 Oh no, the word is not found in the dictionary. Try again or check the spelling.")

def print_suggestions(results):
    if results:
        print("🔍 Here are some suggestions based on your prefix:")
        for idx, res in enumerate(results, 1):
            print(f" {idx}. {res}")
    else:
        print("❌ We couldn't find any suggestions for that prefix. Maybe try another one?")

def print_spell_check(suggestions):
    if suggestions:
        print("🔎 Here are the closest matches to your word:")
        for idx, sug in enumerate(suggestions, 1):
            print(f" {idx}. {sug}")
    else:
        print("😕 We couldn't find any close matches. Please check the spelling.")

# -------------------- Main Function -------------------- #
def main():
    dictionary_path = "words.txt"  # Make sure 'words.txt' exists in the same folder
    trie = Trie()

    print_header()
    print("⏳ Loading your dictionary... Please be patient, this might take a moment.")
    word_list = load_words(dictionary_path, trie)
    print(f"✅ Your dictionary is ready! {len(word_list)} words loaded successfully!\n")

    while True:
        print_menu()
        choice = input("Select an option (1-4): ").strip()

        if choice == '1':
            word = input("🧐 Enter the word you'd like to search for: ").strip()
            found = trie.search(word)
            print_found_message(found)

        elif choice == '2':
            prefix = input("💡 Enter a prefix to get suggestions: ").strip()
            results = trie.suggestions(prefix)
            print_suggestions(results)

        elif choice == '3':
            word = input("🔠 Enter a word to spell-check: ").strip()
            suggestions = spell_check(word, word_list)
            print_spell_check(suggestions)

        elif choice == '4':
            print("👋 Thank you for using the Auto-Complete & Spell Checker. See you next time!")
            break
        else:
            print("⚠️ Invalid option! Please choose between 1 and 4.")

if __name__ == "__main__":
    main()